<!doctype html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://potatsolite.github.io/news/article-66711.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>C#面向抽象编程第二讲</title>
        <meta name="description" content="抽象编程怎么说呢，以观察者模式为例： 观察者模式有两个对象，一个是观察者，一个是可观察者(字面翻译很别扭observable),消息发布者(提供者)。 第一层如下,三个对象A、B、C分别有一个接收消息" />
        <link rel="icon" href="/assets/website/img/potatsolite/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Potatso Lite机场订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://potatsolite.github.io/news/article-66711.htm" />
    <meta property="og:site_name" content="Potatso Lite机场订阅官网" />
    <meta property="og:title" content="C#面向抽象编程第二讲" />
    <meta property="og:image" content="https://potatsolite.github.io/uploads/20240823-1/2a8a97d85d2111d730938df9ab7df169.webp" />
        <meta property="og:release_date" content="2025-03-03T08:15:11" />
    <meta property="og:updated_time" content="2025-03-03T08:15:11" />
        <meta property="og:description" content="抽象编程怎么说呢，以观察者模式为例： 观察者模式有两个对象，一个是观察者，一个是可观察者(字面翻译很别扭observable),消息发布者(提供者)。 第一层如下,三个对象A、B、C分别有一个接收消息" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="manifest" href="site.webmanifest">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="C#面向抽象编程第二讲">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- CSS here -->
    <link rel="stylesheet" href="/assets/website/css/potatsolite/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/slicknav.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/progressbar_barfiller.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/gijgo.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/animated-headline.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/fontawesome-all.min.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/themify-icons.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/slick.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/nice-select.css">
    <link rel="stylesheet" href="/assets/website/css/potatsolite/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-D5F3LS5DN7"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-D5F3LS5DN7');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ? Preloader Start -->
    <div id="preloader-active">
        <div class="preloader d-flex align-items-center justify-content-center">
            <div class="preloader-inner position-relative">
                <div class="preloader-circle"></div>
                <div class="preloader-img pere-text">
                    <img src="/assets/website/img/potatsolite/logo/loder.png" alt="">
                </div>
            </div>
        </div>
    </div>
    <!-- Preloader Start -->
    <header>
        <!-- Header Start -->
        <div class="header-area header-transparent">
            <div class="main-header ">
                <div class="header-bottom  header-sticky">
                    <div class="container-fluid">
                        <div class="row align-items-center">
                            <!-- Logo -->
                            <div class="col-xl-2 col-lg-2">
                                <div class="logo">
                                    <a href="/">
                                                                        <span>Potatso Lite</span>
                                                                        </a>
                                </div>
                            </div>
                            <div class="col-xl-10 col-lg-10">
                                <div class="menu-wrapper d-flex align-items-center justify-content-end">
                                    <!-- Main-menu -->
                                    <div class="main-menu d-none d-lg-block">
                                        <nav>
                                            <ul id="navigation">
                                                                                                <li><a href="/">首页</a></li>
                                                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                                <li><a href="/client.htm">客户端</a></li>
                                                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            </div>
                            <!-- Mobile Menu -->
                            <div class="col-12">
                                <div class="mobile_menu d-block d-lg-none"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Header End -->
    </header>
    <main>
        <!--? slider Area Start-->
        <section class="slider-area slider-area2">
            <div class="slider-active">
                <!-- Single Slider -->
                <div class="single-slider slider-height2">
                    <div class="container">
                        <div class="row">
                            <div class="col-xl-8 col-lg-11 col-md-12">
                                <div class="hero__caption hero__caption2">
                                    <h1 data-animation="bounceIn" data-delay="0.2s">C#面向抽象编程第二讲</h1>
                                    <!-- breadcrumb Start-->
                                    <nav aria-label="breadcrumb">
                                        <ol class="breadcrumb">
                                            <li class="breadcrumb-item"><a href="/">首页</a></li>
                                            <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                                            <li class="breadcrumb-item">正文</li>
                                        </ol>
                                    </nav>
                                    <!-- breadcrumb End -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <!--? About Area-1 Start -->
        <section class="about-area1 fix pt-10 py-5">
            <div class="support-wrapper align-items-center">
                <div class="container">
                    <div class="row">
                        <div class="col-md-9">
                                            <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<p>抽象编程怎么说呢，以观察者模式为例：</p> <p>观察者模式有两个对象，一个是观察者，一个是可观察者(字面翻译很别扭observable),消息发布者(提供者)。</p> <p>第一层如下,三个对象A、B、C分别有一个接收消息的方法，还有一个存储数据的字段，X就是发布消息的对象，它通过setdata方法设置自己的字段data,然后通知abc，abc如愿以偿地拿到了通知，完美!</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> A     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> Data;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Update(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> data)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.Data =<span style="color: rgba(0, 0, 0, 1)"> data;         }     }</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> B     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> Count;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Notify(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> data)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.Count =<span style="color: rgba(0, 0, 0, 1)"> data;         }     }</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> C     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> N;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Set(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> data)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.N =<span style="color: rgba(0, 0, 0, 1)"> data;         }     }</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> X     {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> data;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> A instanceA;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> B instanceB;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> C instanceC;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> SetData(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> data)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.data =<span style="color: rgba(0, 0, 0, 1)"> data;             instanceA.Update(data);             instanceB.Notify(data);             instanceC.Set(data);         }     }</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> ObserverOne;  A a</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> A(); B b</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> B(); C c</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> C();  Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">订阅前.................</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">a.Data = {a.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">b.Count = {b.Count}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">c.N = {c.N}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);  X x</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> X(); x.instanceA</span>=<span style="color: rgba(0, 0, 0, 1)"> a; x.instanceB</span>=<span style="color: rgba(0, 0, 0, 1)"> b; x.instanceC</span>=<span style="color: rgba(0, 0, 0, 1)"> c; x.SetData(</span><span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);  Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">X发布data=10, 订阅后.................</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">a.Data = {a.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">b.Count = {b.Count}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">c.N = {c.N}</span><span style="color: rgba(128, 0, 0, 1)">"</span>);</pre> </div> <p>再想一想，这好像不够灵活，订阅者是死的，那改进一下：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> IUpdatebleObject     {</span><span style="color: rgba(0, 0, 255, 1)">int</span> Data {<span style="color: rgba(0, 0, 255, 1)">get</span><span style="color: rgba(0, 0, 0, 1)">; }</span><span style="color: rgba(0, 0, 255, 1)">void</span> Update(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> newData);     }</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> A : IUpdatebleObject     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> Data =&gt;<span style="color: rgba(0, 0, 0, 1)"> data;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> data;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Update(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> newData)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.data =<span style="color: rgba(0, 0, 0, 1)"> newData;         }     }</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> B : IUpdatebleObject     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> Data =&gt;<span style="color: rgba(0, 0, 0, 1)"> data;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> data;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Update(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> newData)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.data =<span style="color: rgba(0, 0, 0, 1)"> newData;         }     }</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> C : IUpdatebleObject     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> Data =&gt;<span style="color: rgba(0, 0, 0, 1)"> data;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> data;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Update(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> newData)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.data =<span style="color: rgba(0, 0, 0, 1)"> newData;         }     }</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> X     {</span><span style="color: rgba(0, 0, 255, 1)">private</span> IUpdatebleObject[] updates=<span style="color: rgba(0, 0, 255, 1)">new</span> IUpdatebleObject[<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">public</span> IUpdatebleObject<span style="color: rgba(0, 0, 255, 1)">this</span>[<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> index]         {</span><span style="color: rgba(0, 0, 255, 1)">set</span> { updates[index] =<span style="color: rgba(0, 0, 0, 1)"> value; }         }</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> data;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Update(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> newData)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.data =<span style="color: rgba(0, 0, 0, 1)"> newData;</span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> update<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> updates)             {                 update.Update(newData);             }         }     }</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> ObserverTwo;  X x</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> X();  IUpdatebleObject a</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> A(); IUpdatebleObject b</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> B(); IUpdatebleObject c</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> C(); Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">订阅前.................</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">a.Data = {a.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">b.Data = {b.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">c.Data = {c.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); x[</span><span style="color: rgba(128, 0, 128, 1)">0</span>] =<span style="color: rgba(0, 0, 0, 1)"> a; x[</span><span style="color: rgba(128, 0, 128, 1)">1</span>] =<span style="color: rgba(0, 0, 0, 1)"> b; x[</span><span style="color: rgba(128, 0, 128, 1)">2</span>] =<span style="color: rgba(0, 0, 0, 1)"> c; x.Update(</span><span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">X发布data=10, 订阅后.................</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">a.Data = {a.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">b.Data = {b.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">c.Data = {c.Data}</span><span style="color: rgba(128, 0, 0, 1)">"</span>);</pre> </div> <p>虽然写到这个例子已经很了不起了，但是对于有想法的来说还是可以继续改进，要不然怎么常挂嘴边说面对抽象编程呢，那就继续改进了：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 观察者</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;typeparam name="T"&gt;&lt;/typeparam&gt;</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IObserver&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">     {</span><span style="color: rgba(0, 0, 255, 1)">void</span> Update(SubjectBase&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)"> subject);     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 可观察者(发出通知的对象)</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;typeparam name="T"&gt;&lt;/typeparam&gt;</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> SubjectBase&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">     {</span><span style="color: rgba(0, 0, 255, 1)">protected</span> IList&lt;IObserver&lt;T&gt;&gt; observers =<span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;IObserver&lt;T&gt;&gt;<span style="color: rgba(0, 0, 0, 1)">();</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 0, 1)"> T state;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span> T State =&gt;<span style="color: rgba(0, 0, 0, 1)"> state;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> SubjectBase&lt;T&gt;<span style="color: rgba(0, 0, 255, 1)">operator</span> +(SubjectBase&lt;T&gt; subject,IObserver&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)"> observer)         {             subject.observers.Add(observer);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> subject;         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> SubjectBase&lt;T&gt;<span style="color: rgba(0, 0, 255, 1)">operator</span> -(SubjectBase&lt;T&gt; subject,IObserver&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)"> observer)         {             subject.observers.Remove(observer);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> subject;         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Notify()         {</span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> observer<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> observers)             {                 observer.Update(</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">);             }         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Update(T state)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.state =<span style="color: rgba(0, 0, 0, 1)"> state;             Notify();         }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span> Observer&lt;T&gt; : IObserver&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> T State;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Update(SubjectBase&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)"> subject)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.State =<span style="color: rgba(0, 0, 0, 1)"> subject.State;         }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span> Subject&lt;T&gt;:SubjectBase&lt;T&gt;<span style="color: rgba(0, 0, 0, 1)">     {     }</span></pre> </div> <p>到这里基本上可以说是把骨架搭起来了，这些可以称之为底层的代码。实现代码如下：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> TestObserver     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> TestMulticst()         {             SubjectBase</span>&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt; subject =<span style="color: rgba(0, 0, 255, 1)">new</span> Subject&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;<span style="color: rgba(0, 0, 0, 1)">();             Observer</span>&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt; observer1 =<span style="color: rgba(0, 0, 255, 1)">new</span> Observer&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;<span style="color: rgba(0, 0, 0, 1)">();             observer1.State</span>=<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;             Observer</span>&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt; observer2 =<span style="color: rgba(0, 0, 255, 1)">new</span> Observer&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;<span style="color: rgba(0, 0, 0, 1)">();             observer2.State</span>=<span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">;             subject</span>+=<span style="color: rgba(0, 0, 0, 1)"> observer1;             subject</span>+=<span style="color: rgba(0, 0, 0, 1)"> observer2;             subject.Update(</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);             Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">observer1.State={observer1.State}  observer2.State={observer2.State}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);             subject</span>-=<span style="color: rgba(0, 0, 0, 1)"> observer1;             subject.Update(</span><span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);             Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">update state = 100, observer1.State={observer1.State}  observer2.State={observer2.State}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> TestMultiSubject()         {             SubjectBase</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt; subject1 =<span style="color: rgba(0, 0, 255, 1)">new</span> Subject&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)">();             SubjectBase</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt; subject2 =<span style="color: rgba(0, 0, 255, 1)">new</span> Subject&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)">();             Observer</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt; observer1 =<span style="color: rgba(0, 0, 255, 1)">new</span> Observer&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)">();             observer1.State</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">运动</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;             Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">observer1.State={observer1.State}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);             subject1</span>+=<span style="color: rgba(0, 0, 0, 1)"> observer1;             subject2</span>+=<span style="color: rgba(0, 0, 0, 1)"> observer1;             subject1.Update(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">看电影</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);             Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">observer1.State={observer1.State}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);             subject2.Update(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">喝茶</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);             Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">observer1.State={observer1.State}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);              subject1</span>-=<span style="color: rgba(0, 0, 0, 1)"> observer1;             subject2</span>-=<span style="color: rgba(0, 0, 0, 1)"> observer1;             observer1.State</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">休息</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;             subject1</span>-=<span style="color: rgba(0, 0, 0, 1)"> observer1;             subject2</span>-=<span style="color: rgba(0, 0, 0, 1)"> observer1;             Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">observer1.State={observer1.State}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);         }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> ObserverThree;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">new TestObserver().TestMulticst();</span><span style="color: rgba(0, 0, 255, 1)">new</span> TestObserver().TestMultiSubject();</pre> </div> <p>到这里基本上就完成了任务，也就可以结束了。但是，学习需要深度也需要宽度，所以观察者模式在C#可以通过事件来实现一样的效果。下面就看下上面写这么多的代码用事件怎么写呢,这里的实例稍作变化,实现改变名字通知观察者，这里观察者就是控制台了，打印通知：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> UserEventArgs:EventArgs     {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> name;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span> Name =&gt;<span style="color: rgba(0, 0, 0, 1)"> name;</span><span style="color: rgba(0, 0, 255, 1)">public</span> UserEventArgs(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> name)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.name =<span style="color: rgba(0, 0, 0, 1)"> name;         }      }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> User     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">event</span> EventHandler&lt;UserEventArgs&gt;<span style="color: rgba(0, 0, 0, 1)"> NameChanged;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> name;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> Name         {</span><span style="color: rgba(0, 0, 255, 1)">get</span> {<span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> name; }</span><span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">             {                 name</span>=<span style="color: rgba(0, 0, 0, 1)"> value;                 NameChanged</span>?.Invoke(<span style="color: rgba(0, 0, 255, 1)">this</span>,<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> UserEventArgs(value));             }         }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> ObserverFour;  User user</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> User(); user.NameChanged</span>+=<span style="color: rgba(0, 0, 0, 1)"> OnNameChanged; user.Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">joe</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnNameChanged(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, UserEventArgs args) {     Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{args.Name} Changed</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); }</span></pre> </div> <p>再放一个麻烦一点的例子，字典新增的通知(监听)事件：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span> DictionaryEventArgs&lt;TKey,TValue&gt;<span style="color: rgba(0, 0, 0, 1)"> : EventArgs     {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> TKey key;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> TValue value;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> DictionaryEventArgs(TKey key,TValue value)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.key =<span style="color: rgba(0, 0, 0, 1)"> key;</span><span style="color: rgba(0, 0, 255, 1)">this</span>.value =<span style="color: rgba(0, 0, 0, 1)"> value;         }</span><span style="color: rgba(0, 0, 255, 1)">public</span> TKey Key =&gt;<span style="color: rgba(0, 0, 0, 1)"> key;</span><span style="color: rgba(0, 0, 255, 1)">public</span> TValue Value =&gt;<span style="color: rgba(0, 0, 0, 1)"> value;     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IObserverableDictionary&lt;TKey,TValue&gt;:IDictionary&lt;TKey, TValue&gt;<span style="color: rgba(0, 0, 0, 1)">     {         EventHandler</span>&lt;DictionaryEventArgs&lt;TKey,TValue&gt;&gt; NewItemAdded {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span> ObserverableDictionary&lt;TKey, TValue&gt; : Dictionary&lt;TKey, TValue&gt;, IObserverableDictionary&lt;TKey, TValue&gt;<span style="color: rgba(0, 0, 0, 1)">     {</span><span style="color: rgba(0, 0, 255, 1)">protected</span> EventHandler&lt;DictionaryEventArgs&lt;TKey, TValue&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> newItemAdded;</span><span style="color: rgba(0, 0, 255, 1)">public</span> EventHandler&lt;DictionaryEventArgs&lt;TKey, TValue&gt;&gt; NewItemAdded {<span style="color: rgba(0, 0, 255, 1)">get</span> =&gt; newItemAdded;<span style="color: rgba(0, 0, 255, 1)">set</span>=&gt; newItemAdded =<span style="color: rgba(0, 0, 0, 1)"> value;}</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Add(TKey key,TValue value)         {</span><span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">.Add(key, value);</span><span style="color: rgba(0, 0, 255, 1)">if</span>(NewItemAdded !=<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)                 NewItemAdded(</span><span style="color: rgba(0, 0, 255, 1)">this</span>,<span style="color: rgba(0, 0, 255, 1)">new</span> DictionaryEventArgs&lt;TKey, TValue&gt;<span style="color: rgba(0, 0, 0, 1)">(key, value));           }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> ObserverFive;</span><span style="color: rgba(0, 0, 255, 1)">string</span> key =<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hello</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">string</span> value =<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">world</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;  IObserverableDictionary</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>,<span style="color: rgba(0, 0, 255, 1)">string</span>&gt; dictionary =<span style="color: rgba(0, 0, 255, 1)">new</span> ObserverableDictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>,<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)">(); dictionary.NewItemAdded</span>+=<span style="color: rgba(0, 0, 0, 1)"> Validate; dictionary.Add(key, value);</span><span style="color: rgba(0, 0, 255, 1)">void</span> Validate(<span style="color: rgba(0, 0, 255, 1)">object</span> sender, DictionaryEventArgs&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>,<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> args) {     Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{args.Key} {args.Value}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); }</span></pre> </div> <p>事件说完了！再回头看看观察者设计模式。</p> <p>微软已经很重视观察者模式这个设计，把IObserver、IObservable集成到runtime里面去了，也就是基类库里面。aspnetcore框架也有用到这个，比如日志模块。所以感觉有必要了解一下，放个小例子作为结束：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Message     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span> Notify {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span> Teacher : IObservable&lt;Message&gt;<span style="color: rgba(0, 0, 0, 1)">     {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">readonly</span> List&lt;IObserver&lt;Message&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> _observers;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Teacher()         {             _observers</span>=<span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;IObserver&lt;Message&gt;&gt;<span style="color: rgba(0, 0, 0, 1)">();         }</span><span style="color: rgba(0, 0, 255, 1)">public</span> IDisposable Subscribe(IObserver&lt;Message&gt;<span style="color: rgba(0, 0, 0, 1)"> observer)         {             _observers.Add(observer);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Unsubscribe(observer, _observers);         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> SendMessage(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> message)         {</span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> observer<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> _observers)             {                 observer.OnNext(</span><span style="color: rgba(0, 0, 255, 1)">new</span> Message() { Notify =<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">message</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> });             }         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnCompleted()         {</span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> observer<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> _observers)             {                 observer.OnCompleted();             }             _observers.Clear();         }     }</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Unsubscribe:IDisposable     {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">readonly</span> IObserver&lt;Message&gt;<span style="color: rgba(0, 0, 0, 1)"> _observer;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">readonly</span> List&lt;IObserver&lt;Message&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> _observers;</span><span style="color: rgba(0, 0, 255, 1)">public</span> Unsubscribe(IObserver&lt;Message&gt; observer, List&lt;IObserver&lt;Message&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> observers)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>._observers =<span style="color: rgba(0, 0, 0, 1)"> observers;</span><span style="color: rgba(0, 0, 255, 1)">this</span>._observer =<span style="color: rgba(0, 0, 0, 1)"> observer;         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Dispose()         {</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(_observers.Contains(_observer))                 _observers.Remove(_observer);         }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> Student : IObserver&lt;Message&gt;<span style="color: rgba(0, 0, 0, 1)">     {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> name;</span><span style="color: rgba(0, 0, 255, 1)">public</span> Student(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> name)         {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.name =<span style="color: rgba(0, 0, 0, 1)"> name;         }</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> IDisposable _unsubscribe;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnCompleted()         {             Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">放学了...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnError(Exception error)         {             Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">生病了...</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnNext(Message value)         {             Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">大家好: 我是 {name} -_-</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);             Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">老师说:{value.Notify}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span><span style="color: rgba(0, 0, 255, 1)">void</span> Subscribe(IObservable&lt;Message&gt;<span style="color: rgba(0, 0, 0, 1)"> obserable)         {</span><span style="color: rgba(0, 0, 255, 1)">if</span> (obserable !=<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)                 _unsubscribe</span>= obserable.Subscribe(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">);         }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> StudentZhang : Student     {</span><span style="color: rgba(0, 0, 255, 1)">public</span> StudentZhang(<span style="color: rgba(0, 0, 255, 1)">string</span> name) :<span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">(name)         {         }     }</span><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> StudentLi : Student     {</span><span style="color: rgba(0, 0, 255, 1)">public</span> StudentLi(<span style="color: rgba(0, 0, 255, 1)">string</span> name) :<span style="color: rgba(0, 0, 255, 1)">base</span><span style="color: rgba(0, 0, 0, 1)">(name)         {         }     }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> ObserverSeven;  Teacher teacher</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Teacher(); teacher.Subscribe(</span><span style="color: rgba(0, 0, 255, 1)">new</span> StudentLi(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">李逵</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)); teacher.Subscribe(</span><span style="color: rgba(0, 0, 255, 1)">new</span> StudentZhang(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">张麻子</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)); teacher.SendMessage(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">明天放假</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">); teacher.OnCompleted();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">这里学生是多个，也定义可以多个老师，实现多对多关系</span></pre> </div> <p>示例代码：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/liuzhixin405/exercise/tree/master/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85And%E5%87%BA%E7%89%88%E9%A2%84%E5%AE%9A_EventBus_Observer/Observer/Observer"  rel="nofollow">exercise/发布订阅And出版预定_EventBus_Observer/Observer/Observer at master · liuzhixin405/exercise (github.com)</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-66114.htm">动物疫苗在哪里打的好点呢（动物疫苗证去哪里办怎么办）</a></p>
                                        <p>下一个：<a href="/news/article-66712.htm">动物疫苗价格表最新图片大全集视频（动物疫苗价格表最新图片大全集视频播放）</a></p>
                                    </div>
                                        </div>
                        <div class="col-md-3">
                            <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-53877.htm" title="pytorch 自动构建任意层的深度神经网络(DNN)">pytorch 自动构建任意层的深度神经网络(DNN)</a></li>
                        <li class="py-2"><a href="/news/article-57795.htm" title="开宠物食品店需要多少钱 开宠物食品店需要多少钱一个月">开宠物食品店需要多少钱 开宠物食品店需要多少钱一个月</a></li>
                        <li class="py-2"><a href="/news/article-21708.htm" title="瑞派宠物医院分布（瑞派宠物医院在哪）">瑞派宠物医院分布（瑞派宠物医院在哪）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-16-node-share.htm" title="「1月16日」最高速度21.8M/S，2025年Potatso Lite每天更新免费机场订阅分享">「1月16日」最高速度21.8M/S，2025年Potatso Lite每天更新免费机场订阅分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-11-free-subscribe-node.htm" title="「12月11日」最高速度19.8M/S，2024年Potatso Lite每天更新免费机场订阅节点链接">「12月11日」最高速度19.8M/S，2024年Potatso Lite每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-18-free-subscribe-node.htm" title="「12月18日」最高速度21.3M/S，2024年Potatso Lite每天更新免费机场订阅节点链接">「12月18日」最高速度21.3M/S，2024年Potatso Lite每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-9-free-node-subscribe.htm" title="「12月9日」最高速度22.9M/S，2024年Potatso Lite每天更新免费机场订阅节点链接">「12月9日」最高速度22.9M/S，2024年Potatso Lite每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-30046.htm" title="农大动物医院电话号码查询是多少啊（农大动物医院地址和联系电话）">农大动物医院电话号码查询是多少啊（农大动物医院地址和联系电话）</a></li>
                        <li class="py-2"><a href="/news/article-40241.htm" title="如何从JavaScript对象中删除属性">如何从JavaScript对象中删除属性</a></li>
                        <li class="py-2"><a href="/news/article-39253.htm" title="URL编码及解码原理">URL编码及解码原理</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                    </ul>
    </div>
</div>

                        </div>
                    </div>
                </div>
            </div>
        </section>
        <!-- About Area End -->
    </main>
        <footer>
        <div class="footer-wrappper footer-bg">
            <!-- footer-bottom area -->
            <div class="footer-bottom-area">
                <div class="container">
                    <div class="footer-border">
                        <div class="row d-flex align-items-center">
                            <div class="col-xl-12 ">
                                <div class="footer-copy-right text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                                    <p>
                                        Potatso Lite机场订阅官网 版权所有
                                        <br />
                                        Powered by WordPress
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Footer End-->
        </div>
    </footer>
    <!-- Scroll Up -->
    <div id="back-top">
        <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
    </div>
    <!-- JS here -->
    <script src="/assets/website/js/frontend/potatsolite/vendor/modernizr-3.5.0.min.js"></script>
    <!-- Jquery, Popper, Bootstrap -->
    <script src="/assets/website/js/frontend/potatsolite/vendor/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/popper.min.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/bootstrap.min.js"></script>
    <!-- Jquery Mobile Menu -->
    <script src="/assets/website/js/frontend/potatsolite/jquery.slicknav.min.js"></script>
    <!-- Jquery Slick , Owl-Carousel Plugins -->
    <script src="/assets/website/js/frontend/potatsolite/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/slick.min.js"></script>
    <!-- One Page, Animated-HeadLin -->
    <script src="/assets/website/js/frontend/potatsolite/wow.min.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/animated.headline.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/jquery.magnific-popup.js"></script>
    <!-- Date Picker -->
    <script src="/assets/website/js/frontend/potatsolite/gijgo.min.js"></script>
    <!-- Nice-select, sticky -->
    <script src="/assets/website/js/frontend/potatsolite/jquery.nice-select.min.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/jquery.sticky.js"></script>
    <!-- Progress -->
    <script src="/assets/website/js/frontend/potatsolite/jquery.barfiller.js"></script>
    <!-- counter , waypoint,Hover Direction -->
    <script src="/assets/website/js/frontend/potatsolite/jquery.counterup.min.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/jquery.countdown.min.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/hover-direction-snake.min.js"></script>
    <!-- contact js -->
    <script src="/assets/website/js/frontend/potatsolite/contact.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/jquery.form.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/jquery.validate.min.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/mail-script.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/jquery.ajaxchimp.min.js"></script>
    <!-- Jquery Plugins, main Jquery -->
    <script src="/assets/website/js/frontend/potatsolite/plugins.js"></script>
    <script src="/assets/website/js/frontend/potatsolite/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>